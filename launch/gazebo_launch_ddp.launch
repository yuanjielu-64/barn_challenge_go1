<?xml version="1.0" encoding="UTF-8"?>

<launch>
    <arg name="world_name" default="$(find barn_challenge_lu)/launch/data/world_files/BARN/world_1.world" />
    <arg name="robot_name" default="go1"/>
    <arg name="robot_path" value="(find $(arg robot_name)_description)"/>
    <arg name="dollar" value="$"/>
    
    <arg name="rviz" default="true"/>
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <!-- Debug mode will hung up the robot, use "true" or "false" to switch it. -->
    <arg name="user_debug" default="false"/>
    
    <!-- Robot position -->
    <arg name="x" default="-2" />
    <arg name="y" default="3" />
    <arg name="z" default="0.6" />
    <arg name="roll" default="0" />
    <arg name="pitch" default="0" />
    <arg name="yaw" default="0" />
    <arg name="joystick" default="false" />

    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world_name)"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="headless" value="$(arg headless)"/>
    </include>

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description"
           command="$(find xacro)/xacro --inorder '$(arg dollar)$(arg robot_path)/xacro/robot.xacro' 
           DEBUG:=$(arg user_debug)"/>

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <!-- Set trunk and joint positions at startup -->
    <node pkg="gazebo_ros" type="spawn_model" name="urdf_spawner" respawn="false" output="screen"
          args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg robot_name)_gazebo -param robot_description"/>
    
    <!-- 启动junior_ctrl节点 -->
    <node name="junior_controller" pkg="unitree_guide" type="junior_ctrl" output="screen" />

    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(arg dollar)$(arg robot_path)/config/robot_control.yaml" command="load"/>

    <!-- load the controllers -->
    <node pkg="controller_manager" type="spawner" name="controller_spawner" respawn="false"
          output="screen" ns="/$(arg robot_name)_gazebo" args="joint_state_controller
          FL_hip_controller FL_thigh_controller FL_calf_controller
          FR_hip_controller FR_thigh_controller FR_calf_controller
          RL_hip_controller RL_thigh_controller RL_calf_controller
          RR_hip_controller RR_thigh_controller RR_calf_controller "/>

    <!-- convert joint states to TF transforms for rviz, etc -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher"
          respawn="false" output="screen">
        <remap from="/joint_states" to="/$(arg robot_name)_gazebo/joint_states"/>
    </node>

    <node pkg="barn_challenge_lu" type="Runner" name="Runner" output="screen"
    args="RunMP $(find barn_challenge_lu)/data/ParamsForJackalGlobal.txt UseMP DDP"/>

    <!-- load the parameter unitree_controller -->
    <include file="$(find unitree_controller)/launch/set_ctrl.launch">
        <arg name="rname" value="$(arg robot_name)"/>
    </include>

    <group if="$(eval arg('rviz') == true)">
        <include file="$(arg dollar)(find barn_challenge_lu)/launch/$(arg robot_name)_rviz.launch">
            <arg name="user_debug" value="$(arg user_debug)"/>
        </include>
    </group>

    <node pkg="barn_challenge_lu" type="collision_check_publisher_node" name="collision_check_publisher_node" />


</launch>
